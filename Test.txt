{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4393a036",
   "metadata": {},
   "source": [
    "[![Run Jupyter Notebooks](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/RichardPotthoff/Climate/main?filepath=Climate.ipynb)\n",
    "\n",
    "[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/RichardPotthoff/Climate/blob/master/Climate.ipynb)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7973cb1b",
   "metadata": {
    "toc": true
   },
   "source": [
    "<h1>Table of Contents<span class=\"tocSkip\"></span></h1>\n",
    "<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Constants\" data-toc-modified-id=\"Constants-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;</span>Constants</a></span></li><li><span><a href=\"#Black-Body\" data-toc-modified-id=\"Black-Body-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;</span>Black Body</a></span><ul class=\"toc-item\"><li><span><a href=\"#Solar-irradiance\" data-toc-modified-id=\"Solar-irradiance-2.1\"><span class=\"toc-item-num\">2.1&nbsp;&nbsp;</span>Solar irradiance</a></span></li><li><span><a href=\"#Estimated-daily-temperature-variation-based-on-solar-irradiance-and-heat-capacity-of-atmosphere\" data-toc-modified-id=\"Estimated-daily-temperature-variation-based-on-solar-irradiance-and-heat-capacity-of-atmosphere-2.2\"><span class=\"toc-item-num\">2.2&nbsp;&nbsp;</span>Estimated daily temperature variation based on solar irradiance and heat capacity of atmosphere</a></span></li><li><span><a href=\"#Temperature-of-black-body-and-grey-body-sphere-at-1-au-distance-from-sun\" data-toc-modified-id=\"Temperature-of-black-body-and-grey-body-sphere-at-1-au-distance-from-sun-2.3\"><span class=\"toc-item-num\">2.3&nbsp;&nbsp;</span>Temperature of black-body and grey-body sphere at 1 au distance from sun</a></span></li></ul></li><li><span><a href=\"#Rotating-planet-(sun-over-equator)\" data-toc-modified-id=\"Rotating-planet-(sun-over-equator)-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;</span>Rotating planet (sun over equator)</a></span><ul class=\"toc-item\"><li><span><a href=\"#Temperature-as-function-of-latitude\" data-toc-modified-id=\"Temperature-as-function-of-latitude-3.1\"><span class=\"toc-item-num\">3.1&nbsp;&nbsp;</span>Temperature as function of latitude</a></span></li><li><span><a href=\"#Average-temperature-for-a-rotating-planet\" data-toc-modified-id=\"Average-temperature-for-a-rotating-planet-3.2\"><span class=\"toc-item-num\">3.2&nbsp;&nbsp;</span>Average temperature for a rotating planet</a></span></li></ul></li><li><span><a href=\"#Tidally-locked-planet-(or-sun-over-pole)\" data-toc-modified-id=\"Tidally-locked-planet-(or-sun-over-pole)-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;</span>Tidally locked planet (or sun over pole)</a></span><ul class=\"toc-item\"><li><span><a href=\"#Temperature-as-function-of-latitude-for-a-tidally-locked-planet\" data-toc-modified-id=\"Temperature-as-function-of-latitude-for-a-tidally-locked-planet-4.1\"><span class=\"toc-item-num\">4.1&nbsp;&nbsp;</span>Temperature as function of latitude for a tidally locked planet</a></span></li><li><span><a href=\"#Average-temperature-for-a-tidally-locked-planet\" data-toc-modified-id=\"Average-temperature-for-a-tidally-locked-planet-4.2\"><span class=\"toc-item-num\">4.2&nbsp;&nbsp;</span>Average temperature for a tidally locked planet</a></span></li></ul></li><li><span><a href=\"#Appendix\" data-toc-modified-id=\"Appendix-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;</span>Appendix</a></span><ul class=\"toc-item\"><li><span><a href=\"#Side-by-side-comparison-of-temperature-maps-for-a-tidally-locked-and-a-rotating-planet\" data-toc-modified-id=\"Side-by-side-comparison-of-temperature-maps-for-a-tidally-locked-and-a-rotating-planet-5.1\"><span class=\"toc-item-num\">5.1&nbsp;&nbsp;</span>Side-by-side comparison of temperature maps for a tidally locked and a rotating planet</a></span></li><li><span><a href=\"#NASA-image-of-earth\" data-toc-modified-id=\"NASA-image-of-earth-5.2\"><span class=\"toc-item-num\">5.2&nbsp;&nbsp;</span>NASA image of earth</a></span></li><li><span><a href=\"#Image-of-the-Chimborazo\" data-toc-modified-id=\"Image-of-the-Chimborazo-5.3\"><span class=\"toc-item-num\">5.3&nbsp;&nbsp;</span>Image of the Chimborazo</a></span></li></ul></li></ul></div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "83fde7e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#load missing required files from GitHub, so the Notebook can be run in Google colab\n",
    "def wget(url,local_path='./'):\n",
    "  filename=url.rsplit('/',1)[-1]\n",
    "  import os\n",
    "  if not os.path.exists(local_path+filename):\n",
    "    import urllib3\n",
    "    import certifi\n",
    "    http=urllib3.PoolManager( cert_reqs='CERT_REQUIRED', ca_certs=certifi.where())\n",
    "    with http.request('GET',url,preload_content=False) as r:\n",
    "      with open(local_path+filename,'wb') as f:\n",
    "        print(f'Downloading file: {url}')\n",
    "        print(f'Saving file: {local_path}{filename}')\n",
    "        f.write(r.read())\n",
    "  else:\n",
    "    print(f'\"{local_path}{filename}\" already exists. No need to download.')\n",
    "for filename in ('mollweide.py','fqs.py','IMG_0097.AVIF','IMG_0099.WEBP'):\n",
    "  wget('https://raw.githubusercontent.com/RichardPotthoff/Climate/main/'+filename)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5fcf2c12",
   "metadata": {},
   "source": [
    "# Constants"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15c3e40d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from numpy import pi,sin,cos, arccos as acos, arcsin as asin\n",
    "from matplotlib import pyplot as plt , cm as cmap \n",
    "au=149_597_870_700 # [m] (by definition) astronomical unit: distance sun<->earth\n",
    "r_sun=695_700_000 # [m] radius of the sun\n",
    "T_sun=5_772.0 # [K] surface temperature of the sun\n",
    "r_earth=6_378_100 # [m] radius of the earth at equator\n",
    "g_earth=9.80665 # [m/s^2] acceleration due to gravity on earth\n",
    "cp_air=1005 # [J/(kg K)] specific heat capacity at constant pressure for dry air @15°C\n",
    "deg=pi/180 # 1 angle degree in radians (conversion factor)\n",
    "atm=101325 # [Pa] atmospheric pressure\n",
    "day=24*3600 # [s] length if day in seconds\n",
    "σ_SB=5.67037442e-8 # [J/(m^2 K^4)] Stefan-Boltzmann constant\n",
    "print(f'{r_sun=:7.3e}m, {T_sun=}K, {au=:7.3e}m')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3772a516",
   "metadata": {},
   "source": [
    "# Black Body\n",
    "## Solar irradiance"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4539a47",
   "metadata": {},
   "source": [
    "$$\\dot q_{\\rm au}=\\sigma_\\text{S-B}\\cdot T_{\\rm sun}^4\\cdot\\left(\\frac{r_{\\rm sun}}{1\\cdot{\\rm au}}\\right)^2$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "50c8ad53",
   "metadata": {},
   "outputs": [],
   "source": [
    "q_au=σ_SB*T_sun**4*(r_sun/(1*au))**2\n",
    "print(f'{q_au=:0.0f}W/m^2') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d35dcf45",
   "metadata": {},
   "outputs": [],
   "source": [
    "cp_atmosphere=cp_air*1*atm/g_earth\n",
    "print(f'{cp_atmosphere=:0.3e}J/(m^2 K)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d6197b88",
   "metadata": {},
   "outputs": [],
   "source": [
    "def Qsun(t):\n",
    "  i,r=np.divmod(t+6,24)\n",
    "  return i + (r>12)* 0.5*(1+cos(r*(pi/12)))\n",
    "tod=np.linspace(0,48,201)\n",
    "solrad=np.maximum(cos((tod-12)/24*2*pi),0)\n",
    "plt.plot(tod,solrad-1/pi,label=\"net heat flow: sun - IR\")\n",
    "plt.plot(tod,Qsun(tod),zorder=20,label=\"cumulative solar heating\")\n",
    "plt.plot((0,48),(0,-2),label=\"cumulative IR heat loss\")\n",
    "plt.plot(tod,Qsun(tod)-tod/24,label=\"cumulative heat balance: solar in - IR out\")\n",
    "plt.plot((0,48),(0,0),'k',zorder=10)\n",
    "plt.grid()\n",
    "plt.xlim((0,48))\n",
    "plt.xticks(range(0,49,3))\n",
    "plt.xlabel(\"time of day [h]\")\n",
    "plt.ylabel(\"heat (total per day = 1)\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3841afe0",
   "metadata": {},
   "source": [
    "## Estimated daily temperature variation based on solar irradiance and heat capacity of atmosphere"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f7e5fab",
   "metadata": {},
   "outputs": [],
   "source": [
    "def dT_dt(phi):\n",
    "    return q_au*cos(phi)/(cp_atmosphere*pi)\n",
    "af=sin(acos(1/pi))-acos(1/pi)*1/pi\n",
    "print(f'{af=}')\n",
    "\n",
    "for lat in (0,30,40,50,60,70):\n",
    "  print(f'{lat=:2.0f}: {dT_dt(lat*deg)*day = :0.2f}K/day (ΔT={dT_dt(lat*deg)*day*af:0.2f}K with simultaneous cooling)')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b96c92c8",
   "metadata": {},
   "source": [
    "## Temperature of black-body and grey-body sphere at 1 au distance from sun"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33fa5559",
   "metadata": {},
   "source": [
    "$$T_{\\rm BB} = T_{\\rm sun}\\cdot\\sqrt[\\Large 4 \\hspace{2.5pt}]{\\frac{r_{\\rm sun}^2}{{(1 \\cdot \\rm{au})}^2}\\cdot\\frac{\\pi\\cdot r_{\\rm earth}^2}{4\\cdot\\pi\\cdot r_{\\rm earth}^2}}=T_{\\rm sun}\\cdot\\sqrt[\\Large 4 \\hspace{2.5pt}]{\\frac{r_{\\rm sun}^2}{{(1 \\cdot \\rm{au})}^2}\\cdot\\frac{1}{4}}$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "550aca48",
   "metadata": {},
   "source": [
    "$$T_{\\rm GB} = T_{\\rm sun}\\cdot\\sqrt[\\Large 4 \\hspace{2.5pt}]{\\frac{r_{\\rm sun}^2}{{(1 \\cdot \\rm{au})}^2}\\cdot\\frac{(1-\\alpha_{\\rm cloud})\\cdot\\pi\\cdot r_{\\rm earth}^2}{(1-\\alpha_{\\rm cloud})\\cdot4\\cdot\\pi\\cdot r_{\\rm earth}^2}}=T_{\\rm sun}\\cdot\\sqrt[\\Large 4 \\hspace{2.5pt}]{\\frac{r_{\\rm sun}^2}{{(1 \\cdot \\rm{au})}^2}\\cdot\\frac{1}{4}}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6b7b555e",
   "metadata": {},
   "outputs": [],
   "source": [
    "T_BB = T_GB =T_sun * (r_sun**2/(1*au)**2 * (1/4))**(1/4)\n",
    "print(f'T_BB = T_GB = {T_BB:0.2f}K = {T_BB-273.15:0.2f}°C')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4fafe43",
   "metadata": {},
   "source": [
    "# Rotating planet (sun over equator)\n",
    "## Temperature as function of latitude"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6d7d111",
   "metadata": {},
   "source": [
    "$$T_{\\rm rot}(\\phi) = T_{\\rm sun}\\cdot\\sqrt[\\Large 4 \\hspace{3pt}]{\\frac{r_\\rm{sun}^2}{{(1 \\cdot \\rm{au})}^2}\\cdot\\frac{{\\rm cos}(\\phi)}{\\pi}}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "830889cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "def T_rot(phi):\n",
    "    return T_sun * (r_sun**2/(1*au)**2 * (cos(phi)/pi))**(1/4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c7e3ae2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from mollweide import x_y2lat_lon,lat_lon2x_y\n",
    "def color_bar(ax):\n",
    " ax.set_xticks([])\n",
    " ax.yaxis.tick_right()\n",
    " ax.set_yticks([0,1/3,2/3,1],labels=['-50°C','  0°C',' 50°C','100°C'])\n",
    " ax.contourf(np.ones((1,2))*[[-50+273.15],[100+273.15]], \\\n",
    "             cmap=cmap.jet,levels=100,vmin=220,vmax=220+150)\n",
    "def circle(r=1,Rx=None,Ry=None,tol=0.2):\n",
    "  if Rx==None: Rx=r\n",
    "  if Ry==None: Ry=r\n",
    "  n=max(5,int(pi/(2*tol/max(Rx,Ry))**0.5)+1)\n",
    "  phi=np.linspace(-pi,pi,n+1)\n",
    "  return (Rx*cos(phi),Ry*sin(phi))\n",
    "R=140\n",
    "def moll(ax,T_phi):\n",
    "  ax.set_xticks([2*R*lon/180 for lon in range(-180,181,30)],\\\n",
    "                     labels=[f'{lon:0.0f}' for lon in range(-180,181,30)]) \n",
    "  ax.set_yticks([R*lat_lon2x_y(lat/180*pi,0)[1] for lat in range(-90,91,30)],\\\n",
    "                     labels=[f'{lat:0.0f}' for lat in range(-90,91,30)]) \n",
    "  for lon in range(-180,1,30):\n",
    "    ax.plot(*circle(R,Rx=2*R*lon/180,tol=0.2),'k',zorder=20)\n",
    "  ax.plot(*circle(1.01*R,Rx=1.01*2*R,tol=0.2),'white',lw=4,zorder=15)\n",
    "  for lat in range(0,90,30):\n",
    "    x,y=lat_lon2x_y(lat/180*pi,pi,R=R)\n",
    "    ax.plot((-x,x),(y,y),'k',zorder=20)\n",
    "    ax.plot((-x,x),(-y,-y),'k',zorder=20)\n",
    "  for y in range(-R,R,2):\n",
    "    lat,lon=x_y2lat_lon(0,y,R=R) \n",
    "    x,_=lat_lon2x_y(lat,-pi,R=R)\n",
    "    ax.plot((-x,x),(y,y),color=cmap.jet((T_phi(lat)-220)/150),lw=2.6,zorder=10)\n",
    "  ax.set_title(f'Mollweide projection for \"{T_phi.__name__}\"')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cf2f3d1d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "for phi in reversed([0,10,20,30,40,50,60]): \n",
    " print(f'T_rot({phi:2.0f}°Lat) = {T_rot(phi*deg):0.2f}K, ={T_rot(phi*deg)-273.15:7.2f}°C')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "25bb87d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig,(ax,cb)=plt.subplots(1,2,figsize=(10,17.5),\\\n",
    "  gridspec_kw=dict(wspace=0.05,left=0,right=1,top=0.7,width_ratios=[2,0.15]))\n",
    "ax.set_aspect('equal')\n",
    "moll(ax,T_rot)\n",
    "cb.set_aspect(5.0)\n",
    "color_bar(cb)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2105125",
   "metadata": {},
   "source": [
    "## Average temperature for a rotating planet"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e98ba548",
   "metadata": {},
   "source": [
    "$$\\overline{T_{\\rm rot}}=T_{\\rm sun}\\cdot\\sqrt[\\Large 4 \\hspace{3pt}]{\\frac{r_\\rm{sun}^2}{{(1 \\cdot \\rm{au})}^2}}\\cdot\\frac{\\int_{-\\frac \\pi 2}^\\frac \\pi 2 \\frac{\\cos(\\phi)^\\frac 1 4}{\\pi} \\cdot \\cos(\\phi) \\enspace {\\rm d} \\phi}{\\int_{-\\frac\\pi 2}^\\frac{\\pi}{2} \\cos(\\phi)\\enspace{\\rm d}\\phi}=T_{\\rm sun}\\cdot\\sqrt[\\Large 4 \\hspace{3pt}]{\\frac{r_\\rm{sun}^2}{{(1 \\cdot \\rm{au})}^2}}\\cdot{-\\frac{4\\cdot\\sqrt[\\Large 4 \\hspace{2pt}]\\pi\\cdot\\Gamma(\\frac 1 8)}{15\\cdot\\Gamma({-\\frac 3 8})}}$$ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b4a17e02",
   "metadata": {},
   "outputs": [],
   "source": [
    "from math import gamma\n",
    "T_rot_avg=T_sun * (r_sun**2/(1*au)**2)**(1/4)*-4/15*pi**(1/4)*gamma(1/8)/gamma(-3/8)\n",
    "print(f'T_rot_avg = {T_rot_avg:0.2f}K = {T_rot_avg-273.15:0.2f}°C')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2a0ffad",
   "metadata": {},
   "source": [
    "# Tidally locked planet (or sun over pole)\n",
    "## Temperature as function of latitude for a tidally locked planet"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6404a7bd",
   "metadata": {},
   "source": [
    "$$T_{\\rm pol}(\\phi) = T_{\\rm sun}\\cdot\\sqrt[\\Large 4 \\hspace{3pt}]{\\frac{r_\\rm{sun}^2}{{(1 \\cdot \\rm{au})}^2}\\cdot\\frac{\\sin(\\phi)}{1}}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f0e22223",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def T_pol(phi):\n",
    "    return 0 if phi<0 else T_sun * (r_sun**2/(1*au)**2 * (sin(phi)/1))**(1/4)\n",
    "for phi in [90,80,70,60,50,40,30,20,10,0,-10]: \n",
    " print(f'T_rot({phi:3.0f}°Lat) ={T_pol(phi*deg):7.2f}K ={T_pol(phi*deg)-273.15:7.2f}°C')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7c49da09",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig,(ax,cb)=plt.subplots(1,2,figsize=(10,17.5),\\\n",
    "  gridspec_kw=dict(wspace=0.05,left=0,right=1,top=0.7,width_ratios=[2,0.15]))\n",
    "ax.set_aspect('equal')\n",
    "moll(ax,T_pol)\n",
    "cb.set_aspect(5.0)\n",
    "color_bar(cb)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77fe7e10",
   "metadata": {},
   "source": [
    "## Average temperature for a tidally locked planet"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6bb9f0bc",
   "metadata": {},
   "source": [
    "$$\\overline{T_{\\rm pol}}=T_{\\rm sun}\\cdot\\sqrt[\\Large 4 \\hspace{3pt}]{\\frac{r_\\rm{sun}^2}{{(1 \\cdot \\rm{au})}^2}}\\cdot\\frac{\\int_0^\\frac \\pi 2 \\frac{\\sin(\\phi)^\\frac 1 4}{1} \\cdot \\cos(\\phi) \\enspace {\\rm d} \\phi}{\\int_{-\\frac\\pi 2}^\\frac{\\pi}{2} \\cos(\\phi)\\enspace{\\rm d}\\phi}=T_{\\rm sun}\\cdot\\sqrt[\\Large 4 \\hspace{3pt}]{\\frac{r_\\rm{sun}^2}{{(1 \\cdot \\rm{au})}^2}}\\cdot\\frac 2 5$$ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "91ca7ab9",
   "metadata": {},
   "outputs": [],
   "source": [
    "T_pol_avg=T_sun * (r_sun**2/(1*au)**2)**(1/4)*2/5\n",
    "print(f'T_pol_avg = {T_pol_avg:0.2f}K = {T_pol_avg-273.15:0.2f}°C')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97b439e0",
   "metadata": {},
   "source": [
    "# Appendix\n",
    "## Side-by-side comparison of temperature maps for a tidally locked and a rotating planet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bebb3e43",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def circle(r=1,Rx=None,Ry=None,tol=0.2):\n",
    "  if Rx==None: Rx=r\n",
    "  if Ry==None: Ry=r\n",
    "  n=max(5,int(pi/(2*tol/max(Rx,Ry))**0.5)+1)\n",
    "  phi=np.linspace(-pi,pi,n+1)\n",
    "  return (Rx*cos(phi),Ry*sin(phi))\n",
    "\n",
    "def flat_earth(ax,T_phi):\n",
    "  ax.set_aspect('equal')\n",
    "  ax.set_axis_off()\n",
    "  R=140\n",
    "  ax.set_xlim(-R*1.01,R*1.01)\n",
    "  ax.set_ylim(-R*1.01,R*1.01)\n",
    "  for lon in range(0,180,30):\n",
    "    ax.plot((-R*cos(lon*deg),R*cos(lon*deg)),(-R*sin(lon*deg),R*sin(lon*deg)), \\\n",
    "           'k',zorder=10)\n",
    "  for lat30 in range(-90,89,30):\n",
    "    ax.plot(*circle(R/2*(2-2*sin(lat30*deg))**0.5,tol=0.2), \\\n",
    "         'r' if lat30==0 else  'k' if T_phi(lat30*deg)>100 or lat30== -90  else 'gray' ,zorder=10)\n",
    "  for r in range(2,R,2):\n",
    "    phi=asin(1-(r/(R/2**0.5))**2)\n",
    "    ax.plot(*circle(r,tol=0.2), \\\n",
    "         color=cmap.jet((T_phi(phi)-220)/150),lw=2.6,zorder=5)\n",
    "  ax.set_title(f'Equal-Area Temperature Map for \"{T_phi.__name__}\"')\n",
    "plt.close()\n",
    "fig,axes=plt.subplots(1,3,figsize=(10.0,9.0),\\\n",
    "        gridspec_kw=dict(wspace=0.05,left=0,right=1,top=0.7,width_ratios=[1,1,0.15]))\n",
    "flat_earth(axes[0],T_pol)\n",
    "flat_earth(axes[1],T_rot)\n",
    "axes[2].set_aspect(5.0)\n",
    "color_bar(axes[2])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5acfff54",
   "metadata": {},
   "outputs": [],
   "source": [
    "from mollweide import x_y2lat_lon,lat_lon2x_y\n",
    "R=140\n",
    "def moll(ax,T_phi):\n",
    "  ax.set_xticks([2*R*lon/180 for lon in range(-180,181,30)],\\\n",
    "                     labels=[f'{lon:0.0f}' for lon in range(-180,181,30)]) \n",
    "  ax.set_yticks([R*lat_lon2x_y(lat/180*pi,0)[1] for lat in range(-90,91,30)],\\\n",
    "                     labels=[f'{lat:0.0f}' for lat in range(-90,91,30)]) \n",
    "  for lon in range(-180,1,30):\n",
    "    ax.plot(*circle(R,Rx=2*R*lon/180,tol=0.2),'k',zorder=20)\n",
    "  ax.plot(*circle(1.01*R,Rx=1.01*2*R,tol=0.2),'white',lw=4,zorder=15)\n",
    "  for lat in range(0,90,30):\n",
    "    x,y=lat_lon2x_y(lat/180*pi,pi,R=R)\n",
    "    ax.plot((-x,x),(y,y),'k',zorder=20)\n",
    "    ax.plot((-x,x),(-y,-y),'k',zorder=20)\n",
    "  for y in range(-R,R,2):\n",
    "    lat,lon=x_y2lat_lon(0,y,R=R) \n",
    "    x,_=lat_lon2x_y(lat,-0.99*pi,R=R)\n",
    "    ax.plot((-x,x),(y,y),color=cmap.jet((T_phi(lat)-220)/150),lw=2.6,zorder=10)\n",
    "  ax.set_title(f'Mollweide projection for \"{T_phi.__name__}\"')\n",
    "fig,((ax0,cb0),(ax1,cb1))=plt.subplots(2,2,figsize=(10,17.5),\\\n",
    "  gridspec_kw=dict(wspace=0.05,left=0,right=1,top=0.7,width_ratios=[2,0.15]))\n",
    "ax0.set_aspect('equal')\n",
    "moll(ax0,T_rot)\n",
    "ax1.set_aspect('equal')\n",
    "moll(ax1,T_pol)\n",
    "cb0.set_aspect(5.0)\n",
    "color_bar(cb0)\n",
    "cb1.set_aspect(5.0)\n",
    "color_bar(cb1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8c3d8a57",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": true,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
